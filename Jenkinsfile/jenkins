pipeline {
    agent any

    tools {
        nodejs '22.14.0'  
    }

    environment {
        IMAGE_VERSION = "${env.BUILD_NUMBER}"  // Auto-incrementing build number
        BACKEND_IMAGE = "munfung/backend-api"
        FRONTEND_IMAGE = "munfung/frontend-app"
        BACKEND_CONTAINER = "backend-container"
        FRONTEND_CONTAINER = "frontend-container"
        BACKEND_PORT = "5000"
        FRONTEND_PORT = "80"
    }

    stages {

        stage('Clone GitHub Project') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/MF-Vv/PRE-TASK']])
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin'
                }
            }
        }

        stage('Build and Push Backend Image') {
            steps {
                sh "docker build -t ${BACKEND_IMAGE}:${IMAGE_VERSION} ./backend-app"
                sh "docker tag ${BACKEND_IMAGE}:${IMAGE_VERSION} ${BACKEND_IMAGE}:latest"
                sh "docker push ${BACKEND_IMAGE}:${IMAGE_VERSION}"
                sh "docker push ${BACKEND_IMAGE}:latest"
            }
        }

        stage('Build and Push Frontend Image') {
            steps {
                sh "docker build -t ${FRONTEND_IMAGE}:${IMAGE_VERSION} ./frontend-app"
                sh "docker tag ${FRONTEND_IMAGE}:${IMAGE_VERSION} ${FRONTEND_IMAGE}:latest"
                sh "docker push ${FRONTEND_IMAGE}:${IMAGE_VERSION}"
                sh "docker push ${FRONTEND_IMAGE}:latest"
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh "docker-compose down || true"  // Stop existing containers if running
                sh "docker-compose pull"  // Pull latest images from Docker Hub
                sh "docker-compose up -d --build"  // Start containers in detached mode
            }
        }

        // stage('Deploy Containers') {
        //     steps {
        //         sh "docker stop ${BACKEND_CONTAINER} || true && docker rm ${BACKEND_CONTAINER} || true"
        //         sh "docker stop ${FRONTEND_CONTAINER} || true && docker rm ${FRONTEND_CONTAINER} || true"
                
        //         sh "docker run -d --name ${BACKEND_CONTAINER} -p ${BACKEND_PORT}:${BACKEND_PORT} ${BACKEND_IMAGE}:${IMAGE_VERSION}"
        //         sh "docker run -d --name ${FRONTEND_CONTAINER} -p ${FRONTEND_PORT}:${FRONTEND_PORT} ${FRONTEND_IMAGE}:${IMAGE_VERSION}"
        //     }
        // }

        stage('Clean Up Old Docker Images') {
             steps {
                sh "docker system prune -af"
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed! Check logs."
        }
    }
}
